diff --git a/web/assets/css/app.scss b/web/assets/css/app.scss
index 97eccf1..abd0709 100644
--- a/web/assets/css/app.scss
+++ b/web/assets/css/app.scss
@@ -17,6 +17,11 @@ $roboto-font-path: "../../node_modules/materialize-css/font/roboto/";
 $icons-font-path: "../../node_modules/materialize-css/font/material-design-icons/";
 @import "node_modules/materialize-css/sass/materialize.scss";
 
+html,body,#app-container {
+    width: 100%;
+    height: 100%;
+}
+
 body {
     background-color: $bg-color;
     color: $bg-text-color;
diff --git a/web/assets/html/index.html b/web/assets/html/index.html
index 6e24bce..da5b47d 100644
--- a/web/assets/html/index.html
+++ b/web/assets/html/index.html
@@ -1,10 +1,11 @@
 <!DOCTYPE html>
 <html>
 <head>
-    <link rel="stylesheet" type="text/css" href="/css/app.css" />
+    <link rel="stylesheet" type="text/css" href="/css/app.css?rev=1" />
     <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
     <title>It gets the hose again</title>
     <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0" />
+    <meta name="mobile-web-app-capable" content="yes" />  
     <meta name="apple-mobile-web-app-capable" content="yes" />  
     <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
     <link rel="icon" type="image/png" href="/img/favicon.png" />
@@ -14,15 +15,15 @@
     <link href="/img/apple-icon-167.png" sizes="167x167" rel="apple-touch-icon-precomposed" />
     <link href="/img/apple-icon-180.png" sizes="180x180" rel="apple-touch-icon-precomposed" />
     <style>
-       @media all and (orientation:portrait) {*/
-            body.status-bar nav, 
-            body.status-bar nav .nav-wrapper i, 
-            body.status-bar nav a.button-collapse, 
-            body.status-bar nav a.button collapse {
+       @media all and (orientation:portrait) {
+            #app-container.status-bar nav, 
+            #app-container.status-bar nav .nav-wrapper i, 
+            #app-container.status-bar nav a.button-collapse, 
+            #app-container.status-bar nav a.button collapse {
                 line-height: 104px;
                 height: 84px;
             }
-            body.status-bar #mobile-nav {
+            #app-container.status-bar #mobile-nav {
                 top: 20px;
             }
         }
@@ -32,11 +33,11 @@
     <div id="app-container"></div>
     <script src="/vendor-jquery.js"></script>
     <script src="/vendor.js"></script>
-    <script src="/app.js"></script>
+    <script src="/app.js?rev=1"></script>
     <script>
         $(document).ready(function() {
            if (window.navigator.standalone) {
-               $("body").addClass("status-bar");
+               $("#app-container").addClass("status-bar");
            }
         });
     </script>
diff --git a/web/lib/actions/action-types.js b/web/lib/actions/action-types.js
index 393158a..f26849f 100644
--- a/web/lib/actions/action-types.js
+++ b/web/lib/actions/action-types.js
@@ -15,5 +15,7 @@ export default {
     GET_SETTINGS_START: 'GET_SETTINGS_START',
     GET_SETTINGS_FINISH: 'GET_SETTINGS_FINISH',
     UPDATE_SETTINGS_START: 'UPDATE_SETTINGS_START',
-    UPDATE_SETTINGS_FINISH: 'UPDATE_SETTINGS_FINISH'
+    UPDATE_SETTINGS_FINISH: 'UPDATE_SETTINGS_FINISH',
+    LOGIN_START: 'LOGIN_START',
+    LOGIN_FINISH: 'LOGIN_FINISH'
 }
diff --git a/web/lib/actions/history.js b/web/lib/actions/history.js
index 633e9b4..eef4239 100644
--- a/web/lib/actions/history.js
+++ b/web/lib/actions/history.js
@@ -1,4 +1,5 @@
 import actions from './action-types';
+import { apiError } from './api';
 import superagent from '../superagent-promise';
 
 export function updateHistory() {
@@ -16,7 +17,8 @@ export function updateHistory() {
                res.body.type = actions.GET_HISTORY_FINISH;
                dispatch(res.body);
             })
-            .catch(() => {
+            .catch(err => {
+               dispatch(apiError(err)); 
             });
     };
 }
diff --git a/web/lib/actions/schedule.js b/web/lib/actions/schedule.js
index 19e0fd5..17f0444 100644
--- a/web/lib/actions/schedule.js
+++ b/web/lib/actions/schedule.js
@@ -1,4 +1,5 @@
 import actions from './action-types';
+import { apiError } from './api';
 import superagent from '../superagent-promise';
 
 export function getSchedule() {
@@ -13,11 +14,12 @@ export function getSchedule() {
                 res.body.type = actions.GET_SCHEDULE_FINISH;
                 dispatch(res.body);
             })
-            .catch(() => {
+            .catch(err => {
                 dispatch({
                     type: actions.GET_SCHEDULE_FINISH,
                     success: false
                 });
+                dispatch(apiError(err));
             });
     };
 }
@@ -36,12 +38,13 @@ export function removeFromSchedule(id) {
                 res.body.id = id;
                 dispatch(res.body);
             })
-            .catch(() => {
+            .catch(err => {
                 dispatch({
                     type: actions.REMOVE_FROM_SCHEDULE_FINISH,
                     id,
                     success: false
                 });
+                dispatch(apiError(err));
             });
     };
 }
@@ -64,11 +67,12 @@ export function addToSchedule(duration,time,frequency) {
                 res.body.type = actions.ADD_TO_SCHEDULE_FINISH;
                 dispatch(res.body);
             })
-            .catch(() => {
+            .catch(err => {
                 dispatch({
                     type: actions.ADD_TO_SCHEDULE_FINISH,
                     success: false
                 });
+                dispatch(apiError(err));
             });
     };
 }
diff --git a/web/lib/actions/settings.js b/web/lib/actions/settings.js
index 97971da..1dab10f 100644
--- a/web/lib/actions/settings.js
+++ b/web/lib/actions/settings.js
@@ -1,5 +1,5 @@
 import actions from './action-types';
-
+import { apiError } from './api';
 import superagent from '../superagent-promise';
 
 export function getSettings() {
@@ -16,11 +16,12 @@ export function getSettings() {
                res.body.type = actions.GET_SETTINGS_FINISH;
                dispatch(res.body);
             })
-            .catch(()=> {
+            .catch(err=> {
                 dispatch({
                     type: actions.GET_SETTINGS_FINISH,
                     success: false
                 });
+                dispatch(apiError(err));
             });
     };
 }
@@ -40,11 +41,12 @@ export function updateSettings(settings) {
                res.body.type = actions.UPDATE_SETTINGS_FINISH;
                dispatch(res.body);
             })
-            .catch(()=> {
+            .catch(err=> {
                 dispatch({
                     type: actions.UPDATE_SETTINGS_FINISH,
                     success: false
                 });
+                dispatch(apiError(err));
             });
     };
 }
diff --git a/web/lib/actions/valve.js b/web/lib/actions/valve.js
index 9616391..380b321 100644
--- a/web/lib/actions/valve.js
+++ b/web/lib/actions/valve.js
@@ -2,6 +2,7 @@
 import superagent from '../superagent-promise';
 import actions from './action-types';
 import { updateHistory } from './history';
+import { apiError } from './api';
 import * as clientConfig from '../client-config';
 
 export function toggleValve() {
@@ -18,17 +19,22 @@ export function toggleValve() {
             res.body.type = actions.TOGGLE_VALVE_FINISH;
             dispatch(res.body);
         })
-        .catch(() => {
+        .catch(err => {
             dispatch({
                 type: actions.TOGGLE_VALVE_FINISH,
                 success: false
             });
+            dispatch(apiError(err));
         });
    };
 }
 
-export function pollValve() {
+let polling = false;
+
+export function pollValve(internal) {
     return (dispatch,getState) => {
+        if (!internal && polling) return;
+        polling = true;
         const startTime = new Date();
         return superagent
             .get(`/api/1/poll-valve?open=${getState().valve.open}`)
@@ -43,10 +49,11 @@ export function pollValve() {
                     });
                     dispatch(updateHistory());
                 }
-                setTimeout(()=>dispatch(pollValve()),(new Date()).getTime() - startTime < 1000 ? 1000 : 0);
+                setTimeout(()=>dispatch(pollValve(true)),(new Date()).getTime() - startTime < 1000 ? 1000 : 0);
             })
-            .catch(() => {
-                setTimeout(()=>dispatch(pollValve()),(new Date()).getTime() - startTime < 1000 ? 1000 : 0);
+            .catch(err => {
+                polling = false;
+                dispatch(apiError(err));
             });
 
     };
diff --git a/web/lib/api.js b/web/lib/api.js
index 5fa69ba..4d5dbcc 100644
--- a/web/lib/api.js
+++ b/web/lib/api.js
@@ -3,8 +3,12 @@ import superagent from './superagent-promise';
 import * as keys from '../keys';
 import * as config from './config';
 import * as clientConfig from './client-config';
+import { middleware } from './session';
 
 export default function(app) {
+    if (process.env.NODE_ENV === 'production') {
+        app.use('/api/*',middleware);
+    }
 
     function waitForValveEvent(timeout,callback) {
         let listener = null;
diff --git a/web/lib/app.js b/web/lib/app.js
index e48b719..354a783 100644
--- a/web/lib/app.js
+++ b/web/lib/app.js
@@ -5,6 +5,7 @@ import https from 'https';
 import fs from 'fs';
 import storage from 'node-persist';
 import hap from 'hap-nodejs';
+import uuid from 'node-uuid';
 
 import express from 'express';
 //express middleware
@@ -12,10 +13,12 @@ import morgan from 'morgan';
 import compression from 'compression';
 import errorHandler from 'errorhandler';
 import bodyParser from 'body-parser';
+import cookieParser from 'cookie-parser';
 import winston from 'winston';
 
 import configureApiRoutes from './api';
 import pwauth from './pwauth';
+import { createSession, destroySession } from './session';
 import ValveController from './valve-controller';
 import Scheduler from './scheduler';
 import HistoryLogger from './history-logger';
@@ -41,10 +44,9 @@ app.use(morgan('combined',{ stream: {
   write: message => app.logger.verbose(message)
 }}));
 
+app.use(cookieParser(uuid.v4()));
 app.use(bodyParser.json());
-if (process.env.NODE_ENV === 'production') {
-    app.use(pwauth(app));
-} else {
+if (process.env.NODE_ENV !== 'production') {
     app.use(errorHandler({ dumpExceptions: true, showStack: true }));
 }
 
@@ -84,14 +86,45 @@ function configureRoutes(app) {
    * the app to try and handle requests coming from the client that are intended
    * for the webpack-dev-server
    */
-  app.get('/socket.io*',function(req,res) {
+  app.get('/socket.io*',(req,res)=> {
       const message = 'You are not running this application via webpack-dev-server. Browse to this application using the webpack-dev-server port to enable webpack support';
       app.logger.warn(message);
-      res.statusCode = 502;
-      res.write(message);
-      res.end();
+      res.status(502).send(message);
   });
 
+  app.post('/login',(req,res) => {
+        if (!req.body || !req.body.name || !req.body.password) {
+            return res.json({
+                success: false,
+                message: 'Required properties "name" and "password" were not present'
+            });
+        }
+
+        pwauth(req.body.name,req.body.password,(err,success) => {
+            if (err) {
+                app.logger.error(`Unable to authenticate via pwauth - ${err.stack}`);
+                res.sendStatus(500);
+            }
+            if (success) {
+                createSession(res);
+                return res.json({
+                    success: true
+                });
+            } else {
+                app.logger.warning(`User ${req.body.name} failed authorization`);
+                return res.json({
+                    success: false,
+                    message: 'Invalid user name or password'
+                });
+            }
+        });
+   }); 
+
+   app.get('/logout', (req,res) => {
+        destroySession(res);
+        res.redirect('/');
+   });
+
   /**
    * handle rendering of the UI
    */
diff --git a/web/lib/components/main.js b/web/lib/components/main.js
index ded27bb..e68a269 100644
--- a/web/lib/components/main.js
+++ b/web/lib/components/main.js
@@ -4,6 +4,7 @@ import { Link } from 'react-router';
 import React from 'react';
 import { connect } from 'react-redux';
 import ValveSwitch from './valve-switch';
+import Logo from './logo';
 
 let DevTools = null; 
 if (process.env.NODE_ENV !== 'production') {
@@ -29,11 +30,9 @@ export default class Main extends React.Component {
             <nav className='top-nav'>
                 <div className='nav-wrapper'>
                     <a className='brand-logo hide-on-med-and-down'>
-                       <svg style={{width:"2rem",height:"2rem",marginLeft:"8px",marginRight:"8px"}} viewBox="0 0 24 24">
-                           <path fill="#fff" d="M19,14.5C19,14.5 21,16.67 21,18A2,2 0 0,1 19,20A2,2 0 0,1 17,18C17,16.67 19,14.5 19,14.5M5,18V9A2,2 0 0,1 3,7A2,2 0 0,1 5,5V4A2,2 0 0,1 7,2H9A2,2 0 0,1 11,4V5H19A2,2 0 0,1 21,7V9L21,11A1,1 0 0,1 22,12A1,1 0 0,1 21,13H17A1,1 0 0,1 16,12A1,1 0 0,1 17,11V9H11V18H12A2,2 0 0,1 14,20V22H2V20A2,2 0 0,1 4,18H5Z" />
-                       </svg>
+                       <Logo style={{width:"2rem",height:"2rem",marginLeft:"8px",marginRight:"8px"}} />
                     </a>
-                    <a href='#' data-activates='mobile-nav' className='button-collapse'><i className='material-icons'>menu</i></a>
+                    <a href='#' data-activates='mobile-nav' className='button-collapse'><i style={{marginLeft:'8px'}} className='material-icons'>menu</i></a>
                     <ul className='right hide-on-med-and-down'>
                         <li className={this.props.routing.path==='/'?'active':''}><Link to='/'><i className='material-icons'>schedule</i></Link></li>
                         <li className={this.props.routing.path==='/history'?'active':''}><Link to='/history'><i className='material-icons'>history</i></Link></li>
@@ -45,6 +44,7 @@ export default class Main extends React.Component {
                     <li className={this.props.routing.path==='/'?'active':''}><Link to='/'><i className='material-icons left'>schedule</i> Schedule</Link></li>
                     <li className={this.props.routing.path==='/history'?'active':''}><Link to='/history'><i className='material-icons left'>history</i> History</Link></li>
                     <li className={this.props.routing.path==='/settings'?'active':''}><Link to='/settings'><i className='material-icons left'>settings</i> Settings</Link></li>
+                    <li><a href='/logout'><i className='material-icons left'>exit_to_app</i> Logout</a></li>
                 </ul>
             </nav>
         </header>
diff --git a/web/lib/config.js b/web/lib/config.js
index b16a6e7..9bc5fe0 100644
--- a/web/lib/config.js
+++ b/web/lib/config.js
@@ -8,8 +8,12 @@ export const MAX_HISTORY_ITEMS = 100;
 export const LONGPOLL_TIMEOUT = 30000;
 export const PUBLIC_STATIC_CACHING = process.env.NODE_ENV === 'development' ? {} : { 
   maxAge: MAX_AGE,
-  setHeaders: (res) => {
-    res.setHeader('Cache-Control',`public, max-age=${MAX_AGE}`);
+  setHeaders: (res,path) => {
+    if (path === '/' || path.indexOf('.html') > 0) {
+        res.setHeader('Cache-Control','no-cache');
+    } else {
+        res.setHeader('Cache-Control',`public, max-age=${MAX_AGE}`);
+    }
   }
 };
 export const HOMEKIT_PORT = 51826;
@@ -24,3 +28,5 @@ export const WEB_USER = 'web user';
 export const SCHEDULER = 'scheduler';
 export const HOMEKIT_USER = 'HomeKit user';
 export const SCHEDULE_CHECK_INTERVAL = 30000;
+export const SESSION_EXPIRY = 2592000000;
+export const SESSION_COOKIE = 'it-gets-the-hose-auth';
diff --git a/web/lib/pwauth.js b/web/lib/pwauth.js
index 9381c29..a455e2f 100644
--- a/web/lib/pwauth.js
+++ b/web/lib/pwauth.js
@@ -1,49 +1,18 @@
 import { spawn } from 'child_process';
-import basicAuth from 'basic-auth';
 
-function unauthorized(res) {
-    res.set('WWW-Authenticate', 'Basic realm=Authorization Required');
-    res.sendStatus(401);
-}
-
-const cache = {};
-
-export default function(app) {
-    return (req,res,next)=> {
-        const user = basicAuth(req);
-        if (!user || !user.name || !user.pass) {
-            return unauthorized(res);
+export default function(name,password,cb) {
+    //spawn pwauth and check the users credentials
+    const pwauth = spawn('pwauth',[]);
+    pwauth.on('close',code => {
+        if (code !== 0) {
+            cb(null,false);
+        } else {
+            cb(null,true);
         }
-
-        // check the cache first as this is faster
-        // than spawning pwauth for every request
-        const cached = cache[user.name];
-        if (cached) {
-            if (user.pass === cached.pass) {
-                next();
-            } else {
-                unauthorized(res);
-            }
-            return;
-        }
-
-        //spawn pwauth and check the users credentials
-        const pwauth = spawn('pwauth',[]);
-        pwauth.on('close',code => {
-            if (code !== 0) {
-                app.logger.warning(`User ${user.name} failed authorization`);
-                unauthorized(res);
-            } else {
-                cache[user.name] = { pass: user.pass };
-                next();
-            }
-        });
-        pwauth.on('error',err => {
-            app.logger.error(`Unable to authenticate via pwauth - ${err.stack}`);
-            res.sendStatus(500);
-        });
-        pwauth.stdin.write(user.name+'\n'+user.pass+'\n');
-        pwauth.stdin.end();
-    }
-    
+    });
+    pwauth.on('error',err => {
+        cb(err);
+    });
+    pwauth.stdin.write(name+'\n'+password+'\n');
+    pwauth.stdin.end();
 }
diff --git a/web/lib/reducers/index.js b/web/lib/reducers/index.js
index f7ddc48..7d108ad 100644
--- a/web/lib/reducers/index.js
+++ b/web/lib/reducers/index.js
@@ -1,12 +1,14 @@
 'use strict'
 import { combineReducers } from 'redux';
 import { routeReducer }  from 'redux-simple-router';
+import authReducer from './auth-reducer';
 import valveReducer from './valve-reducer'
 import scheduleReducer from './schedule-reducer';
 import historyReducer from './history-reducer';
 import settingsReducer from './settings-reducer';
 
 export default combineReducers({
+    auth: authReducer,
     routing: routeReducer,
     valve: valveReducer,
     schedule: scheduleReducer,
diff --git a/web/lib/routes.js b/web/lib/routes.js
index 587dce4..e25bbd7 100644
--- a/web/lib/routes.js
+++ b/web/lib/routes.js
@@ -5,10 +5,12 @@ import Main from './components/main';
 import Schedule from './components/schedule';
 import Settings from './components/settings';
 import History from './components/history';
+import Login from './components/login';
 import NotFound from './components/not-found';
 
 export default (
   <Router>
+    <Route path='/login' component={Login} />
     <Route path='/' component={Main}>
       <IndexRoute component={Schedule} />
       <Route path='/settings' component={Settings} />
diff --git a/web/package.json b/web/package.json
index cfbc888..7303ad1 100644
--- a/web/package.json
+++ b/web/package.json
@@ -15,9 +15,9 @@
   "dependencies": {
     "babel": "^5.8.21",
     "babel-runtime": "^5.8.24",
-    "basic-auth": "^1.0.3",
     "body-parser": "^1.14.0",
     "compression": "^1.2.1",
+    "cookie-parser": "^1.4.0",
     "errorhandler": "^1.3.0",
     "express": "^4.10.4",
     "hap-nodejs": "0.0.7",
